cols <- a_palette[c(2,3,5,7)]
####################################################
# 1. Try quantile regression
#https://stat.ethz.ch/R-manual/R-patched/library/mgcv/html/smooth.terms.html
fit.q <- qgam(lat ~ s(year, bs = 'cs'),
data = amac,
qu = c(0.95))
# Fit values for a line
yq <- data.frame(year = c(1800:2019))
fit <- predict(fit.q, newdata = yq, se=TRUE)
yq$pred <- as.numeric(fit$fit)
yq$se <- as.numeric(fit$se)
yq %>% ggplot(aes(x = year, y = pred)) +
theme_classic() +
geom_point(data = amac, aes(x = year, y = lat), col = 'grey') +
geom_ribbon(aes(ymin = pred - se, ymax = pred + se), alpha = 0.3, fill = cols[1]) +
geom_line(lwd = 1, col = cols[1]) +
ggtitle('QGAM (smooth)') + ylab('Latitude') + xlab('Year') -> g1
# 1B. Quantile regression (no smooth)
lin.q <- qgam(lat ~ year,
data = amac,
qu = c(0.95))
# Fit values for a line
lq <- data.frame(year = c(1800:2019))
fit <- predict(lin.q, newdata = lq, se=TRUE)
lq$pred <- as.numeric(fit$fit)
lq$se <- as.numeric(fit$se)
lq %>% ggplot(aes(x = year, y = pred)) +
theme_classic() +
geom_point(data = amac, aes(x = year, y = lat), col = 'grey') +
geom_ribbon(aes(ymin = pred - se, ymax = pred + se), alpha = 0.3, fill = cols[1]) +
geom_line(lwd = 1, col = cols[1]) +
ggtitle('QGAM (linear)') + ylab('Latitude') + xlab('Year') -> g1b
# 2. Extreme value regression
fit.e <- gam(list(lat ~ s(year),
~ s(year),
~ 1),
data = amax, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
ye <- data.frame(year = c(1800:2019))
fit2 <- predict(fit.e, newdata = ye, se=TRUE)
ye$pred <- rebuild(fit2$fit)
ye$se <- rebuild(fit2$se)
ye %>% ggplot(aes(x = year, y = pred)) +
theme_classic() +
geom_point(data = amac, aes(x = year, y = lat), col = 'grey') +
geom_ribbon(aes(ymin = pred - se, ymax = pred + se), alpha = 0.3, fill = cols[4]) +
geom_line(lwd = 1, col = cols[4]) +
ggtitle('GEVLSS (smooth)') + ylab('Latitude') + xlab('Year') -> g2
# 2b. Extreme value regression
lin.e <- gam(list(lat ~ year,
~ year,
~ 1),
data = amax, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
le <- data.frame(year = c(1800:2019))
lin2 <- predict(lin.e, newdata = le, se=TRUE)
le$pred <- rebuild(lin2$fit)
le$se <- rebuild(lin2$se)
le %>% ggplot(aes(x = year, y = pred)) +
theme_classic() +
geom_point(data = amac, aes(x = year, y = lat), col = 'grey') +
geom_ribbon(aes(ymin = pred - se, ymax = pred + se), alpha = 0.3, fill = cols[4]) +
geom_line(lwd = 1, col = cols[4]) +
ggtitle('GEVLSS (linear)') + ylab('Latitude') + xlab('Year') -> g2b
############################
# How do these compare?
(g1 + g1b) / (g2 + g2b)
###########################
# Why does this happen?
amac %>% filter(year > 1900) %>%
mutate(decade = floor(year/10)*10) %>%
arrange(decade) %>%
mutate(decadef = factor(decade)) -> amac.ridge
amac.ridge %>% ggplot(aes(x = lat, y = decadef, fill = decade)) +
scale_y_discrete(limits = rev(levels(amac.ridge$decadef))) +
geom_density_ridges(alpha = 0.8, color = "white",
scale = 2.5, rel_min_height = 0.01) +
labs(x = "Latitude", y = "Year") +
guides(fill = F) +
theme_ridges()
#############################################################################
# PART II. COMPARISON ACROSS SPECIES
estimates <- data.frame(Species = keeps,
QGAM.s = 0,
QGAM.l = 0,
GEVLSS.s = 0,
GEVLSS.l = 0)
for (i in 1:nrow(estimates)) {
sp <- (sal %>% filter(species == estimates$Species[i]))
sp %<>% cc_outl(sp, lon = 'long', lat = 'lat', species = 'species',
method = 'quantile', mltpl = 20) # Clean the data: 20*IQR
spmax <- (sp %>% group_by(year) %>% summarize(lat = max(lat)))
if(length(unique(spmax$lat))<25) {estimates[i,2:5] <- NA } else {
# Model 1
fit.q <- qgam(lat ~ s(year, bs = 'cs'),
data = sp,
qu = c(0.95))
yq <- data.frame(year = c(1900:2015))
fit <- predict(fit.q, newdata = yq, se=TRUE)
yq$pred <- as.numeric(fit$fit)
estimates$QGAM.s[i] <- (yq %>% filter(year %in% c(2011:2015)) %>% pull(pred) %>% mean()) -
(yq %>% filter(year %in% c(1901:1905)) %>% pull(pred) %>% mean())
# Model 2
lin.q <- qgam(lat ~ year,
data = sp,
qu = c(0.95))
lq <- data.frame(year = c(1800:2019))
fit <- predict(lin.q, newdata = lq, se=TRUE)
lq$pred <- as.numeric(fit$fit)
estimates$QGAM.l[i] <- (lq %>% filter(year %in% c(2011:2015)) %>% pull(pred) %>% mean())-
(lq %>% filter(year %in% c(1901:1905)) %>% pull(pred) %>% mean())
# Model 3
fit.e <- tryCatch(gam(list(lat ~ s(year),
~ s(year),
~ 1),
data = spmax, method = "REML",
family = gevlss(link = list("identity", "identity", "identity"))), error = function(e) {NA})
if(is.na(fit.e)) { estimates$`GEVLSS.s`[i] <- NA} else {
ye <- data.frame(year = c(1800:2019))
fit2 <- predict(fit.e, newdata = ye, se=TRUE)
ye$pred <- rebuild(fit2$fit)
estimates$GEVLSS.s[i] <- (ye %>% filter(year %in% c(2011:2015)) %>% pull(pred) %>% mean()) -
(ye %>% filter(year %in% c(1901:1905)) %>% pull(pred) %>% mean())
}
# Model 4
lin.e <- gam(list(lat ~ year,
~ year,
~ 1),
data = spmax, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
le <- data.frame(year = c(1800:2019))
lin2 <- predict(lin.e, newdata = le, se=TRUE)
le$pred <- rebuild(lin2$fit)
estimates$GEVLSS.l[i] <- (le %>% filter(year %in% c(2011:2015)) %>% pull(pred) %>% mean()) -
(le %>% filter(year %in% c(1901:1905)) %>% pull(pred) %>% mean())
print(i)
}
}
estimates %<>% filter(!is.na(GEVLSS.l))
estimates %<>% mutate_at(c('QGAM.l','QGAM.s','GEVLSS.l','`GEVLSS.s`'),
function(x) {x * 111 / 110}) # 111 km/year but 110 years
estimates %>% pivot_longer(cols = c('QGAM.l','QGAM.s','GEVLSS.l','`GEVLSS.s`')) %>%
rename(method = name, shift = value) -> estimates
ggdotchart(estimates,
x = 'Species',
y = 'shift',
group = 'method',
color = 'method',
add = 'segment',
add.params = list(color = "lightgray", size = 1.5),
ggtheme = theme_pubclean())
estimates2 <- estimates
estimates2$shift = 0
est <- bind_rows(estimates, estimates2)
cols <- cols[c(1,2,4,3)] # Fix this so smoothed is darker
ggplot(est, aes(x = factor(Species), y = shift)) +
coord_flip() + scale_x_discrete(limits = rev(levels(factor(est$Species)))) +
geom_hline(yintercept = 0, linetype = 'dashed') +
theme_bw() +
geom_line(
aes(col = method),
position = position_dodge(width = 0.3),
show.legend = FALSE,
size = 1.5
) +
geom_point(
aes(fill = method),
data = subset(est, shift != 0),
#col = "transparent",
shape = 21,
size = 3,
position = position_dodge(width = 0.4)
) +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
xlab(NULL) + ylab("Estimated range shift (km/year)")
# For data manipulation
library(tidyverse)
library(magrittr)
library(CoordinateCleaner)
# For the models
library(qgam)
library(mgcViz)
# For visualization
library(patchwork)
library(ggridges)
library(ggpubr)
library(awtools)
setwd("~/Github/salamanders")
sal <- read_tsv("sal.csv")
sal %<>% filter(!is.na(species), !is.na(decimalLatitude), !is.na(year))
# Keeps possible NA's for elevation
keeps <- sort(unique(sal$species))[as.numeric(table(sal$species))>100]
sal %<>% filter(species %in% keeps)
sal %<>% rename(lat = decimalLatitude,
long = decimalLongitude)
sal %>% filter(species == 'Ambystoma maculatum') -> amac
amax <- (amac %>% group_by(year) %>%
summarize(lat = max(lat)))
######## A function to fix evgam
rebuild <- function(df){
mu <- df[,1]
rho <- df[,2]
xi <- df[,3]
## Get the predicted expected response...
fv <- mu + exp(rho)*(gamma(1-xi)-1)/xi
return(fv)
}
######## Grab some colors
cols <- a_palette[c(2,3,5,7)]
####################################################
# 1. Try quantile regression
#https://stat.ethz.ch/R-manual/R-patched/library/mgcv/html/smooth.terms.html
fit.q <- qgam(lat ~ s(year, bs = 'cs'),
data = amac,
qu = c(0.95))
# Fit values for a line
yq <- data.frame(year = c(1800:2019))
fit <- predict(fit.q, newdata = yq, se=TRUE)
yq$pred <- as.numeric(fit$fit)
yq$se <- as.numeric(fit$se)
yq %>% ggplot(aes(x = year, y = pred)) +
theme_classic() +
geom_point(data = amac, aes(x = year, y = lat), col = 'grey') +
geom_ribbon(aes(ymin = pred - se, ymax = pred + se), alpha = 0.3, fill = cols[1]) +
geom_line(lwd = 1, col = cols[1]) +
ggtitle('QGAM (smooth)') + ylab('Latitude') + xlab('Year') -> g1
# 1B. Quantile regression (no smooth)
lin.q <- qgam(lat ~ year,
data = amac,
qu = c(0.95))
# Fit values for a line
lq <- data.frame(year = c(1800:2019))
fit <- predict(lin.q, newdata = lq, se=TRUE)
lq$pred <- as.numeric(fit$fit)
lq$se <- as.numeric(fit$se)
lq %>% ggplot(aes(x = year, y = pred)) +
theme_classic() +
geom_point(data = amac, aes(x = year, y = lat), col = 'grey') +
geom_ribbon(aes(ymin = pred - se, ymax = pred + se), alpha = 0.3, fill = cols[1]) +
geom_line(lwd = 1, col = cols[1]) +
ggtitle('QGAM (linear)') + ylab('Latitude') + xlab('Year') -> g1b
# 2. Extreme value regression
fit.e <- gam(list(lat ~ s(year),
~ s(year),
~ 1),
data = amax, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
ye <- data.frame(year = c(1800:2019))
fit2 <- predict(fit.e, newdata = ye, se=TRUE)
ye$pred <- rebuild(fit2$fit)
ye$se <- rebuild(fit2$se)
ye %>% ggplot(aes(x = year, y = pred)) +
theme_classic() +
geom_point(data = amac, aes(x = year, y = lat), col = 'grey') +
geom_ribbon(aes(ymin = pred - se, ymax = pred + se), alpha = 0.3, fill = cols[4]) +
geom_line(lwd = 1, col = cols[4]) +
ggtitle('GEVLSS (smooth)') + ylab('Latitude') + xlab('Year') -> g2
# 2b. Extreme value regression
lin.e <- gam(list(lat ~ year,
~ year,
~ 1),
data = amax, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
le <- data.frame(year = c(1800:2019))
lin2 <- predict(lin.e, newdata = le, se=TRUE)
le$pred <- rebuild(lin2$fit)
le$se <- rebuild(lin2$se)
le %>% ggplot(aes(x = year, y = pred)) +
theme_classic() +
geom_point(data = amac, aes(x = year, y = lat), col = 'grey') +
geom_ribbon(aes(ymin = pred - se, ymax = pred + se), alpha = 0.3, fill = cols[4]) +
geom_line(lwd = 1, col = cols[4]) +
ggtitle('GEVLSS (linear)') + ylab('Latitude') + xlab('Year') -> g2b
############################
# How do these compare?
(g1 + g1b) / (g2 + g2b)
###########################
# Why does this happen?
amac %>% filter(year > 1900) %>%
mutate(decade = floor(year/10)*10) %>%
arrange(decade) %>%
mutate(decadef = factor(decade)) -> amac.ridge
amac.ridge %>% ggplot(aes(x = lat, y = decadef, fill = decade)) +
scale_y_discrete(limits = rev(levels(amac.ridge$decadef))) +
geom_density_ridges(alpha = 0.8, color = "white",
scale = 2.5, rel_min_height = 0.01) +
labs(x = "Latitude", y = "Year") +
guides(fill = F) +
theme_ridges()
#############################################################################
# PART II. COMPARISON ACROSS SPECIES
estimates <- data.frame(Species = keeps,
QGAM.s = 0,
QGAM.l = 0,
GEVLSS.s = 0,
GEVLSS.l = 0)
for (i in 1:nrow(estimates)) {
sp <- (sal %>% filter(species == estimates$Species[i]))
sp %<>% cc_outl(sp, lon = 'long', lat = 'lat', species = 'species',
method = 'quantile', mltpl = 20) # Clean the data: 20*IQR
spmax <- (sp %>% group_by(year) %>% summarize(lat = max(lat)))
if(length(unique(spmax$lat))<25) {estimates[i,2:5] <- NA } else {
# Model 1
fit.q <- qgam(lat ~ s(year, bs = 'cs'),
data = sp,
qu = c(0.95))
yq <- data.frame(year = c(1900:2015))
fit <- predict(fit.q, newdata = yq, se=TRUE)
yq$pred <- as.numeric(fit$fit)
estimates$QGAM.s[i] <- (yq %>% filter(year %in% c(2011:2015)) %>% pull(pred) %>% mean()) -
(yq %>% filter(year %in% c(1901:1905)) %>% pull(pred) %>% mean())
# Model 2
lin.q <- qgam(lat ~ year,
data = sp,
qu = c(0.95))
lq <- data.frame(year = c(1800:2019))
fit <- predict(lin.q, newdata = lq, se=TRUE)
lq$pred <- as.numeric(fit$fit)
estimates$QGAM.l[i] <- (lq %>% filter(year %in% c(2011:2015)) %>% pull(pred) %>% mean())-
(lq %>% filter(year %in% c(1901:1905)) %>% pull(pred) %>% mean())
# Model 3
fit.e <- tryCatch(gam(list(lat ~ s(year),
~ s(year),
~ 1),
data = spmax, method = "REML",
family = gevlss(link = list("identity", "identity", "identity"))), error = function(e) {NA})
if(is.na(fit.e)) { estimates$GEVLSS.s[i] <- NA} else {
ye <- data.frame(year = c(1800:2019))
fit2 <- predict(fit.e, newdata = ye, se=TRUE)
ye$pred <- rebuild(fit2$fit)
estimates$GEVLSS.s[i] <- (ye %>% filter(year %in% c(2011:2015)) %>% pull(pred) %>% mean()) -
(ye %>% filter(year %in% c(1901:1905)) %>% pull(pred) %>% mean())
}
# Model 4
lin.e <- gam(list(lat ~ year,
~ year,
~ 1),
data = spmax, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
le <- data.frame(year = c(1800:2019))
lin2 <- predict(lin.e, newdata = le, se=TRUE)
le$pred <- rebuild(lin2$fit)
estimates$GEVLSS.l[i] <- (le %>% filter(year %in% c(2011:2015)) %>% pull(pred) %>% mean()) -
(le %>% filter(year %in% c(1901:1905)) %>% pull(pred) %>% mean())
print(i)
}
}
estimates %<>% filter(!is.na(GEVLSS.l))
estimates %<>% mutate_at(c('QGAM.l','QGAM.s','GEVLSS.l','GEVLSS.s'),
function(x) {x * 111 / 110}) # 111 km/year but 110 years
estimates %>% pivot_longer(cols = c('QGAM.l','QGAM.s','GEVLSS.l','GEVLSS.s')) %>%
rename(method = name, shift = value) -> estimates
ggdotchart(estimates,
x = 'Species',
y = 'shift',
group = 'method',
color = 'method',
add = 'segment',
add.params = list(color = "lightgray", size = 1.5),
ggtheme = theme_pubclean())
estimates2 <- estimates
estimates2$shift = 0
est <- bind_rows(estimates, estimates2)
cols <- cols[c(1,2,4,3)] # Fix this so smoothed is darker
ggplot(est, aes(x = factor(Species), y = shift)) +
coord_flip() + scale_x_discrete(limits = rev(levels(factor(est$Species)))) +
geom_hline(yintercept = 0, linetype = 'dashed') +
theme_bw() +
geom_line(
aes(col = method),
position = position_dodge(width = 0.3),
show.legend = FALSE,
size = 1.5
) +
geom_point(
aes(fill = method),
data = subset(est, shift != 0),
#col = "transparent",
shape = 21,
size = 3,
position = position_dodge(width = 0.4)
) +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
xlab(NULL) + ylab("Estimated range shift (km/year)")
?recode
estimates
estimates %>% mutate(method = recode(method, c('QGAM (L)' = 'QGAM.l')))
estimates %>% mutate(method = recode(method, c(`QGAM (L)` = 'QGAM.l')))
estimates %>% mutate(method = recode(method, `QGAM (L)` = 'QGAM.l'))
estimates %>% mutate(method = recode(method, `QGAM (L)` = `QGAM.l``))
estimates %>% mutate(method = recode(method, `QGAM (L)` = `QGAM.l`))
estimates %>% mutate(method = recode(method, `QGAM (L)` = 'QGAM.l'))
estimates %>% mutate(method = recode(method, "QGAM (L)"`" = 'QGAM.l'))
ggdotchart(estimates,
x = 'Species',
y = 'shift',
group = 'method',
color = 'method',
add = 'segment',
add.params = list(color = "lightgray", size = 1.5),
ggtheme = theme_pubclean())
estimates2 <- estimates
estimates2$shift = 0
est <- bind_rows(estimates, estimates2)
cols <- cols[c(1,2,4,3)] # Fix this so smoothed is darker
ggplot(est, aes(x = factor(Species), y = shift)) +
coord_flip() + scale_x_discrete(limits = rev(levels(factor(est$Species)))) +
geom_hline(yintercept = 0, linetype = 'dashed') +
theme_bw() +
geom_line(
aes(col = method),
position = position_dodge(width = 0.3),
show.legend = FALSE,
size = 1.5
) +
geom_point(
aes(fill = method),
data = subset(est, shift != 0),
#col = "transparent",
shape = 21,
size = 3,
position = position_dodge(width = 0.4)
) +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
xlab(NULL) + ylab("Estimated range shift (km/year)")
estimates %>% mutate(method = recode(method, "QGAM (L)" = 'QGAM.l'))
estimates %>% mutate(method = recode(method, "QGAM (L)" = 'QGAM.l'))
recode(estimates$method, "QGAM (L)" = 'QGAM.l')
estimates %>% mutate(method = recode_factor(method, "QGAM (L)" = 'QGAM.l'))
level_key <- c(`QGAM (L)` = 'QGAM.l')
estimates %>% mutate(method = recode_factor(method, level_key))
estimates %>% mutate(method = recode_factor(method, !level_key))
estimates %>% mutate(method = recode_factor(method, !!!level_key))
estimates %>% mutate(method = recode_factor(method, !!level_key))
estimates %>% mutate(method = recode_factor(method, !!!level_key))
level_key <- c(`QGAM (S)` = 'QGAM.s')
estimates %>% mutate(method = recode_factor(method, !!!level_key))
level_key <- c(QGAM.s = `QGAM (S)`)
estimates %>% mutate(method = recode_factor(method, !!!level_key))
level_key <- c(QGAM.s = "`QGAM (S)`")
estimates %>% mutate(method = recode_factor(method, !!!level_key))
level_key <- c(QGAM.s = "QGAM (S)")
estimates %>% mutate(method = recode_factor(method, !!!level_key))
level_key <- c(QGAM.s = "QGAM (S)",
QGAM.l = "QGAM (L)",
GEVLSS.s = "GEVLSS (S)",
GEVLSS.l = "GEVLSS (L)")
estimates %>% mutate(method = recode_factor(method, !!!level_key))
estimates %<>% mutate(method = recode_factor(method, !!!level_key))
ggdotchart(estimates,
x = 'Species',
y = 'shift',
group = 'method',
color = 'method',
add = 'segment',
add.params = list(color = "lightgray", size = 1.5),
ggtheme = theme_pubclean())
estimates2 <- estimates
estimates2$shift = 0
est <- bind_rows(estimates, estimates2)
cols <- cols[c(1,2,4,3)] # Fix this so smoothed is darker
ggplot(est, aes(x = factor(Species), y = shift)) +
coord_flip() + scale_x_discrete(limits = rev(levels(factor(est$Species)))) +
geom_hline(yintercept = 0, linetype = 'dashed') +
theme_bw() +
geom_line(
aes(col = method),
position = position_dodge(width = 0.3),
show.legend = FALSE,
size = 1.5
) +
geom_point(
aes(fill = method),
data = subset(est, shift != 0),
#col = "transparent",
shape = 21,
size = 3,
position = position_dodge(width = 0.4)
) +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
xlab(NULL) + ylab("Estimated range shift (km/year)")
estimates %<>% mutate(Method = recode_factor(method, !!!level_key))
estimates2 <- estimates
estimates2$shift = 0
est <- bind_rows(estimates, estimates2)
cols <- cols[c(1,2,4,3)] # Fix this so smoothed is darker
ggplot(est, aes(x = factor(Species), y = shift)) +
coord_flip() + scale_x_discrete(limits = rev(levels(factor(est$Species)))) +
geom_hline(yintercept = 0, linetype = 'dashed') +
theme_bw() +
geom_line(
aes(col = Method),
position = position_dodge(width = 0.3),
show.legend = FALSE,
size = 1.5
) +
geom_point(
aes(fill = Method),
data = subset(est, shift != 0),
#col = "transparent",
shape = 21,
size = 3,
position = position_dodge(width = 0.4)
) +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
xlab(NULL) + ylab("Estimated range shift (km/year)")
